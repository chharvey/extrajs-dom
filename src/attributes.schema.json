{
  "$schema": "http://json-schema.org/schema#",
  "$id": "http://chharvey.github.io/extrajs-dom/attributes.schema.json",
  "title": "List of all Attributes.",
  "type": "array",
  "uniqueItems": true,
  "items": {
    "title": "Attr",
    "type": "object",
    "additionalProperties": false,
    "required": ["name", "type", "description", "elements"],
    "properties": {
      "name": { "type": "string", "description": "the name of the attribute" },
      "type": {
        "type": "string",
        "description": "the attribute type",
        "oneOf": [
          { "const": "boolean", "description": "The attribute, if present, has exactly and only the empty string (\"\") as a value. OR: The attribute may be present or absent. Its value is irrelevant." },
          { "const": "enum"   , "description": "The attribute, if present, has a value that is one of a list of pre-defined strings." },
          { "const": "number" , "description": "The attribute, if present, has a string value that can be converted to a number." },
          { "const": "string" , "description": "The attribute, if present, has any string value." }
        ]
      },
      "description": { "type": "string", "description": "what the attribute means" },
      "usage"      : { "type": "string", "description": "suggestions for author usage" },
      "elements"   : {
        "type": "array",
        "minItems": 1,
        "description": "the elements that support this attribute",
        "items": {
          "type": "string",
          "description": "a valid CSS selector"
        }
      },
      "values": {
        "type": "object",
        "description": "the exact values, or types of values, allowed on this attribute. This spec may be omitted if and only if the attribute type is 'boolean'.",
        "additionalProperties": {
          "type": "object",
          "description": "schema for generic attribute values",
          "required": ["description"],
          "properties": {
            "description": {
              "allOf": [{ "$ref": "#/items/properties/description" }],
              "description": "what the value means"
            },
            "elements": {
              "allOf": [{ "$ref": "#/items/properties/elements" }],
              "description": "the elements for which this attribute value is supported. This spec may be left blank if and only if this set of elements is equal to the attributeâ€™s set of elements."
            }
          }
        },
        "properties": {
          "undefined": {
            "type": "object",
            "required": ["description"],
            "description": "indicates semantics for when the attribute is absent on the element. Does *not* indicate semantics of an attribute whose value is the string `\"undefined\"`; for that case, use the property name `\"'undefined'\"` in your JSON markup.",
            "properties": {
              "description": { "allOf": [{ "$ref": "#/items/properties/values/additionalProperties/properties/description" }]},
              "elements"   : { "allOf": [{ "$ref": "#/items/properties/values/additionalProperties/properties/elements" }] }
            }
          },
          "'undefined'": {
            "type": "object",
            "required": ["description"],
            "description": "indicates semantics for the attribute value `\"undefined\"`. This should be rare, as there are no known attributes that have special semantics for the value `undefined`.",
            "properties": {
              "description": { "allOf": [{ "$ref": "#/items/properties/values/additionalProperties/properties/description" }]},
              "elements"   : { "allOf": [{ "$ref": "#/items/properties/values/additionalProperties/properties/elements" }] }
            }
          }
        }
      }
    }
  }
}
